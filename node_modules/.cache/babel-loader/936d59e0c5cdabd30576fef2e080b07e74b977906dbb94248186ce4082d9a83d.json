{"ast":null,"code":"import { toast } from 'react-toastify';\nimport { DateTime } from \"luxon\";\nconst useRecibir = e => {\n  e.preventDefault();\n  let metros = parseInt(e.target.ingreso.value);\n  let propiedad = e.target.propiedad.value;\n  let zona = e.target.zona.value;\n  let PrecioMetro = 50;\n  let precioZonaNorte = 0;\n  let precioZonaSur = 0;\n  let precioZonaEsteOeste = 0;\n  if (zona === \"zona norte\" || zona === \"zona centro\" || zona === \"barrio privado\") {\n    precioZonaNorte = precioZonaNorte + 200;\n  }\n  if (zona === \"zona sur\" || zona === \"subirbio\") {\n    precioZonaSur = precioZonaSur + 100;\n  }\n  if (zona === \"zona este\" || zona === \"zona oeste\" || zona === \"zona rural\" || zona === \"zona industrial\") {\n    precioZonaEsteOeste = precioZonaEsteOeste + 130;\n  }\n  let casa = 0;\n  let Propiedadlujo = 0;\n  let edificio = 0;\n  if (propiedad === \"penthouse\" || propiedad === \"loft\" || propiedad === \"casaquinta\") {\n    Propiedadlujo = Propiedadlujo + 7000;\n  }\n  if (propiedad === \"edificio\" || propiedad === \"triplex\" || propiedad === \"duplex\") {\n    edificio = edificio + 5500;\n  }\n  if (propiedad == \"monoambiente\" || propiedad == \"casa de dos ambientes\" || propiedad == \"casa de tres ambientes\") {\n    casa = casa + 3800;\n  }\n  if (metros > 40 && metros < 401 && isNaN(metros) == false && propiedad != \"\" && zona != \"\") {\n    let historial = {\n      'id': Math.trunc(Math.random() * 1000),\n      'fecha': DateTime.now().toLocaleString() + ' ' + DateTime.now().toLocaleString(DateTime.TIME_24_SIMPLE),\n      'propiedad': propiedad,\n      'ubicacion': zona,\n      'metrosCuadrados': metros,\n      'poliza': PrecioMetro * metros + precioZonaEsteOeste + precioZonaNorte + precioZonaSur + edificio + Propiedadlujo + casa\n    };\n    const local = JSON.parse(localStorage.getItem(\"datos\")) || [];\n    local.push(historial);\n    localStorage.setItem(\"datos\", JSON.stringify(local));\n    toast.success(\"Cotización realizada\");\n\n    //precio.current.innerText=`Precio estimado ${historial.poliza}`;\n    document.querySelector(\".precio\").innerHTML = `Precio estimado $${historial.poliza}`;\n  } else if (metros < 40 || metros > 400) {\n    toast.error('Tiene que tener un minímo de 40 metros cuadrado');\n  } else if (metros > 400) {\n    toast.error(\"No podemos agregar más de 400 metros cuadrado\");\n  } else if (isNaN(metros) == true) {\n    toast.error(\"Ingrese un número\");\n  }\n};\nexport default useRecibir;","map":{"version":3,"names":["toast","DateTime","useRecibir","e","preventDefault","metros","parseInt","target","ingreso","value","propiedad","zona","PrecioMetro","precioZonaNorte","precioZonaSur","precioZonaEsteOeste","casa","Propiedadlujo","edificio","isNaN","historial","Math","trunc","random","now","toLocaleString","TIME_24_SIMPLE","local","JSON","parse","localStorage","getItem","push","setItem","stringify","success","document","querySelector","innerHTML","poliza","error"],"sources":["C:/Users/Usuario/Desktop/untrefreactf/src/components/useRecibir.jsx"],"sourcesContent":["import { toast } from 'react-toastify';\nimport { DateTime } from \"luxon\";\n\nconst useRecibir = (e) => {\n    e.preventDefault();\n\n    let metros = parseInt(e.target.ingreso.value);\n    let propiedad = e.target.propiedad.value; let zona = e.target.zona.value;\n    let PrecioMetro = 50;\n    let precioZonaNorte = 0; let precioZonaSur = 0; let precioZonaEsteOeste = 0;\n    \n    if (zona === \"zona norte\" || zona === \"zona centro\" || zona === \"barrio privado\") {\n        precioZonaNorte = precioZonaNorte + 200;\n    } if (zona === \"zona sur\" || zona === \"subirbio\") {\n        precioZonaSur = precioZonaSur + 100;\n    } if (zona === \"zona este\" || zona === \"zona oeste\" || zona === \"zona rural\" || zona === \"zona industrial\") {\n        precioZonaEsteOeste = precioZonaEsteOeste + 130;\n    }\n\n    let casa = 0; let Propiedadlujo = 0; let edificio = 0;\n\n    if (propiedad === \"penthouse\" || propiedad === \"loft\" || propiedad === \"casaquinta\") {\n        Propiedadlujo = Propiedadlujo + 7000;\n    }if(propiedad === \"edificio\" || propiedad === \"triplex\" || propiedad === \"duplex\") {\n        edificio = edificio + 5500;\n    }if(propiedad == \"monoambiente\" || propiedad == \"casa de dos ambientes\" || propiedad == \"casa de tres ambientes\") {\n        casa = casa + 3800;\n    }\n\n    if ((metros > 40 && metros < 401) && isNaN(metros) == false && propiedad != \"\" && zona != \"\") {\n        let historial = {\n            'id': Math.trunc(Math.random() * 1000),\n            'fecha': DateTime.now().toLocaleString() + ' ' + DateTime.now().toLocaleString(DateTime.TIME_24_SIMPLE),\n            'propiedad': propiedad,\n            'ubicacion': zona,\n            'metrosCuadrados': metros,\n            'poliza': PrecioMetro * metros + precioZonaEsteOeste + precioZonaNorte + precioZonaSur + edificio + Propiedadlujo + casa,\n        }\n\n        const local = JSON.parse(localStorage.getItem(\"datos\")) || [];\n        local.push(historial);\n        localStorage.setItem(\"datos\", JSON.stringify(local));\n        toast.success(\"Cotización realizada\");\n\n       //precio.current.innerText=`Precio estimado ${historial.poliza}`;\n        document.querySelector(\".precio\").innerHTML = `Precio estimado $${historial.poliza}`;\n    } else if (metros < 40 || metros > 400) {\n        toast.error('Tiene que tener un minímo de 40 metros cuadrado');\n    } else if (metros > 400) {\n        toast.error(\"No podemos agregar más de 400 metros cuadrado\")\n    } else if (isNaN(metros) == true) {\n        toast.error(\"Ingrese un número\");\n    }\n}\nexport default useRecibir;\n"],"mappings":"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"},"metadata":{},"sourceType":"module","externalDependencies":[]}